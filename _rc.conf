
# ===================================================================
# This file contains the default startup commands for ranger.
# To change them, it is recommended to create the file
# ~/.config/ranger/rc.conf and add your custom commands there.
#
# If you copy this whole file there, you may want to set the environment
# variable RANGER_LOAD_DEFAULT_RC to FALSE to avoid loading it twice.
#
# The purpose of this file is mainly to define keybindings and settings.
# For running more complex python code, please create a plugin in "plugins/" or
# a command in "commands.py".
#
# Each line is a command that will be run before the user interface
# is initialized.  As a result, you can not use commands which rely
# on the UI such as :delete or :mark.
# ===================================================================

# ===================================================================
# == Options
# ===================================================================

# How many columns are there, and what are their relative widths?
set column_ratios 1,3,4

# Which files should be hidden? (regular expression)
set hidden_filter ^\.|\.(?:pyc|pyo|bak|swp)$|^lost\+found$|^__(py)?cache__$

# show hidden files? you can toggle this by typing 'zh'
set show_hidden false

# ask for a confirmation when running the "delete" command?
# valid values are "always", "never", "multiple" (default)
# with "multiple", ranger will ask only if you delete multiple files at once.
set confirm_on_delete multiple

# which script is used to generate file previews?
# ranger ships with scope.sh, a script that calls external programs (see
# readme.md for dependencies) to preview images, archives, etc.
set preview_script ~/.config/ranger/scope.sh

# use the external preview script or display simple plain text or image previews?
set use_preview_script true

# automatically count files in the directory, even before entering them?
set automatically_count_files true

# open all images in this directory when running certain image viewers
# like feh or sxiv?  you can still open selected files by marking them.
set open_all_images true

# be aware of version control systems and display information.
set vcs_aware false

# state of the three backends git, hg, bzr. the possible states are
# disabled, local (only show local info), enabled (show local and remote
# information).
set vcs_backend_git enabled
set vcs_backend_hg disabled
set vcs_backend_bzr disabled

# use one of the supported image preview protocols
set preview_images false

# set the preview image method. supported methods:
#
# * w3m (default):
#   preview images in full color with the external command "w3mimgpreview"?
#   this requires the console web browser "w3m" and a supported terminal.
#   it has been successfully tested with "xterm" and "urxvt" without tmux.
#
# * iterm2:
#   preview images in full color using iterm2 image previews
#   (http://iterm2.com/images.html). this requires using iterm2 compiled
#   with image preview support.
set preview_images_method w3m

# use a unicode "..." character to mark cut-off filenames?
set unicode_ellipsis false

# show dotfiles in the bookmark preview box?
set show_hidden_bookmarks true

# which colorscheme to use?  these colorschemes are available by default:
# default, jungle, snow, solarized
set colorscheme jungle

# preview files on the rightmost column?
# and collapse (shrink) the last column if there is nothing to preview?
set preview_files true
set preview_directories true
set collapse_preview false

# save the console history on exit?
set save_console_history true

# draw the status bar on top of the browser window (default: bottom)
set status_bar_on_top false

# draw a progress bar in the status bar which displays the average state of all
# currently running tasks which support progress bars?
set draw_progress_bar_in_status_bar true

# draw borders around columns?
set draw_borders true

# display the directory name in tabs?
set dirname_in_tabs false

# enable the mouse support?
set mouse_enabled true

# display the file size in the main column or status bar?
set display_size_in_main_column true
set display_size_in_status_bar true

# display files tags in all columns or only in main column?
set display_tags_in_all_columns true

# set a title for the window?
set update_title false

# set the title to "ranger" in the tmux program?
set update_tmux_title false

# shorten the title if it gets long?  the number defines how many
# directories are displayed at once, 0 turns off this feature.
set shorten_title 3

# abbreviate $home with ~ in the titlebar (first line) of ranger?
set tilde_in_titlebar false

# how many directory-changes or console-commands should be kept in history?
set max_history_size 20
set max_console_history_size 50

# try to keep so much space between the top/bottom border when scrolling:
set scroll_offset 8

# flush the input after each key hit?  (noticable when ranger lags)
set flushinput true

# padding on the right when there's no preview?
# this allows you to click into the space to run the file.
set padding_right true

# save bookmarks (used with mx and `x) instantly?
# this helps to synchronize bookmarks between multiple ranger
# instances but leads to *slight* performance loss.
# when false, bookmarks are saved when ranger is exited.
set autosave_bookmarks true

# you can display the "real" cumulative size of directories by using the
# command :get_cumulative_size or typing "dc".  the size is expensive to
# calculate and will not be updated automatically.  you can choose
# to update it automatically though by turning on this option:
set autoupdate_cumulative_size false

# turning this on makes sense for screen readers:
set show_cursor false

# one of: size, natural, basename, atime, ctime, mtime, type, random
set sort natural

# additional sorting options
set sort_reverse false
set sort_case_insensitive true
set sort_directories_first true
set sort_unicode false

# enable this if key combinations with the alt key don't work for you.
# (especially on xterm)
set xterm_alt_key false

# whether to include bookmarks in cd command
set cd_bookmarks true

# avoid previewing files larger than this size, in bytes.  use a value of 0 to
# disable this feature.
set preview_max_size 0

# add the highlighted file to the path in the titlebar
set show_selection_in_titlebar true

# the delay that ranger idly waits for user input, in milliseconds, with a
# resolution of 100ms.  lower delay reduces lag between directory updates but
# increases cpu load.
set idle_delay 2000

# when the metadata manager module looks for metadata, should it only look for
# a ".metadata.json" file in the current directory, or do a deep search and
# check all directories above the current one as well?
set metadata_deep_search false

# ===================================================================
# == local options
# ===================================================================
# you can set local options that only affect a single directory.

# examples:
# setlocal path=~/downloads sort mtime

# ===================================================================
# == command aliases in the console
# ===================================================================

alias e    edit
alias q    quit
alias q!   quitall
alias qa   quitall
alias qall quitall
alias setl setlocal

alias filter     scout -prt
alias find       scout -aeit
alias mark       scout -mr
alias unmark     scout -mr
alias search     scout -rs
alias search_inc scout -rts
alias travel     scout -aefiklst

# ===================================================================
# == define keys for the browser
# ===================================================================

# basic
map     q quit!
map     q quit
copymap q zz zq

map r     reload_cwd
map <c-r> reset
map <c-l> redraw_window
map <c-c> abort
map <esc> change_mode normal

map i display_file
map ? help
map w display_log
map w taskview_open
map s shell $shell

map :  console
map ;  console
map !  console shell%space
map @  console -p6 shell  %%s
map #  console shell -p%space
map s  console shell%space
map r  chain draw_possible_programs; console open_with%space
map f  console find%space
map cd console cd%space

# change the line mode
map mf linemode filename
map mi linemode fileinfo
map mp linemode permissions
map mt linemode metatitle

# tagging / marking
map t       tag_toggle
map ut      tag_remove
map "<any>  tag_toggle tag=%any
map <space> mark_files toggle=true
map v       mark_files all=true toggle=true
map uv      mark_files all=true val=false
map v       toggle_visual_mode
map uv      toggle_visual_mode reverse=true

# for the nostalgics: midnight commander bindings
map <f1> help
map <f3> display_file
map <f4> edit
map <f5> copy
map <f6> cut
map <f7> console mkdir%space
map <f8> console delete
map <f10> exit

# in case you work on a keyboard with dvorak layout
map <up>       move up=1
map <down>     move down=1
map <left>     move left=1
map <right>    move right=1
map <home>     move to=0
map <end>      move to=-1
map <pagedown> move down=1   pages=true
map <pageup>   move up=1     pages=true
map <cr>       move right=1
#map <delete>   console delete
map <insert>   console touch%space

# vim-like
copymap <up>       k
copymap <down>     j
copymap <left>     h
copymap <right>    l
copymap <home>     gg
copymap <end>      g
copymap <pagedown> <c-f>
copymap <pageup>   <c-b>

map j  move down=0.5  pages=true
map k  move up=0.5    pages=true
copymap j <c-d>
copymap k <c-u>

# jumping around
map h     history_go -1
map l     history_go 1
map ]     move_parent 1
map [     move_parent -1
map }     traverse

map gh cd ~
map ge cd /etc
map gu cd /mnt/c/users/robinson/documents
map gf cd /mnt/c/users/robinson/documents/consoleflashcards/bin/debug/netcoreapp2.0/notes
map go cd /mnt/c/develop/pilot/pilot_1.16/pilot_1.16_customer/output
map gl cd -r .
map gl cd -r %f
map gv cd /var
map gm cd /media
map gm cd /mnt
map gs cd /srv
map gr cd /
map gr eval fm.cd(ranger.rangerdir)
map g/ cd /
map g? cd /usr/share/doc/ranger

# external programs
map e  edit
map du shell -p du --max-depth=1 -h --apparent-size
map du shell -p du --max-depth=1 -h --apparent-size | sort -rh
map yp shell -f echo -n %d/%f | xsel -i; xsel -o | xsel -i -b
map yd shell -f echo -n %d    | xsel -i; xsel -o | xsel -i -b
map yn shell -f echo -n %f    | xsel -i; xsel -o | xsel -i -b

# filesystem operations
map =  chmod

map cw console rename%space
map a  rename_append
map a  eval fm.open_console('rename ' + fm.thisfile.basename)
map i  eval fm.open_console('rename ' + fm.thisfile.basename, position=7)

map pp paste
map po paste overwrite=true
map pl paste_symlink relative=false
map pl paste_symlink relative=true
map phl paste_hardlink
map pht paste_hardlinked_subtree

map dd console delete

map dd cut
map ud uncut
map da cut mode=add
map dr cut mode=remove

map yy copy
map uy uncut
map ya copy mode=add
map yr copy mode=remove

# temporary workarounds
map dgg eval fm.cut(dirarg=dict(to=0), narg=quantifier)
map dg  eval fm.cut(dirarg=dict(to=-1), narg=quantifier)
map dj  eval fm.cut(dirarg=dict(down=1), narg=quantifier)
map dk  eval fm.cut(dirarg=dict(up=1), narg=quantifier)
map ygg eval fm.copy(dirarg=dict(to=0), narg=quantifier)
map yg  eval fm.copy(dirarg=dict(to=-1), narg=quantifier)
map yj  eval fm.copy(dirarg=dict(down=1), narg=quantifier)
map yk  eval fm.copy(dirarg=dict(up=1), narg=quantifier)

# searching
map /  console search%space
map n  search_next
map n  search_next forward=false
map ct search_next order=tag
map cs search_next order=size
map ci search_next order=mimetype
map cc search_next order=ctime
map cm search_next order=mtime
map ca search_next order=atime

# tabs
map <c-n>     tab_new ~
map <c-w>     tab_close
map <tab>     tab_move 1
map <s-tab>   tab_move -1
map <a-right> tab_move 1
map <a-left>  tab_move -1
map gt        tab_move 1
map gt        tab_move -1
map gn        tab_new ~
map gc        tab_close
map uq        tab_restore
map <a-1>     tab_open 1
map <a-2>     tab_open 2
map <a-3>     tab_open 3
map <a-4>     tab_open 4
map <a-5>     tab_open 5
map <a-6>     tab_open 6
map <a-7>     tab_open 7
map <a-8>     tab_open 8
map <a-9>     tab_open 9

# sorting
map or toggle_option sort_reverse
map oz set sort=random
map os chain set sort=size;      set sort_reverse=false
map ob chain set sort=basename;  set sort_reverse=false
map on chain set sort=natural;   set sort_reverse=false
map om chain set sort=mtime;     set sort_reverse=false
map oc chain set sort=ctime;     set sort_reverse=false
map oa chain set sort=atime;     set sort_reverse=false
map ot chain set sort=type;      set sort_reverse=false
map oe chain set sort=extension; set sort_reverse=false

map os chain set sort=size;      set sort_reverse=true
map ob chain set sort=basename;  set sort_reverse=true
map on chain set sort=natural;   set sort_reverse=true
map om chain set sort=mtime;     set sort_reverse=true
map oc chain set sort=ctime;     set sort_reverse=true
map oa chain set sort=atime;     set sort_reverse=true
map ot chain set sort=type;      set sort_reverse=true
map oe chain set sort=extension; set sort_reverse=true

map dc get_cumulative_size

# settings
map zc    toggle_option collapse_preview
map zd    toggle_option sort_directories_first
map zh    toggle_option show_hidden
map <c-h> toggle_option show_hidden
map zi    toggle_option flushinput
map zm    toggle_option mouse_enabled
map zp    toggle_option preview_files
map zp    toggle_option preview_directories
map zs    toggle_option sort_case_insensitive
map zu    toggle_option autoupdate_cumulative_size
map zv    toggle_option use_preview_script
map zf    console filter%space

# bookmarks
map `<any>  enter_bookmark %any
map '<any>  enter_bookmark %any
map m<any>  set_bookmark %any
map um<any> unset_bookmark %any

map m<bg>   draw_bookmarks
copymap m<bg>  um<bg> `<bg> '<bg>

# generate all the chmod bindings with some python help:
eval for arg in "rwxxst": cmd("map +u{0} shell -f chmod u+{0} %s".format(arg))
eval for arg in "rwxxst": cmd("map +g{0} shell -f chmod g+{0} %s".format(arg))
eval for arg in "rwxxst": cmd("map +o{0} shell -f chmod o+{0} %s".format(arg))
eval for arg in "rwxxst": cmd("map +a{0} shell -f chmod a+{0} %s".format(arg))
eval for arg in "rwxxst": cmd("map +{0}  shell -f chmod u+{0} %s".format(arg))

eval for arg in "rwxxst": cmd("map -u{0} shell -f chmod u-{0} %s".format(arg))
eval for arg in "rwxxst": cmd("map -g{0} shell -f chmod g-{0} %s".format(arg))
eval for arg in "rwxxst": cmd("map -o{0} shell -f chmod o-{0} %s".format(arg))
eval for arg in "rwxxst": cmd("map -a{0} shell -f chmod a-{0} %s".format(arg))
eval for arg in "rwxxst": cmd("map -{0}  shell -f chmod u-{0} %s".format(arg))

# ===================================================================
# == define keys for the console
# ===================================================================
# note: unmapped keys are passed directly to the console.

# basic
cmap <tab>   eval fm.ui.console.tab()
cmap <s-tab> eval fm.ui.console.tab(-1)
cmap <esc>   eval fm.ui.console.close()
cmap <cr>    eval fm.ui.console.execute()
cmap <c-l>   redraw_window

copycmap <esc> <c-c>
copycmap <cr>  <c-j>

# move around
cmap <up>    eval fm.ui.console.history_move(-1)
cmap <down>  eval fm.ui.console.history_move(1)
cmap <left>  eval fm.ui.console.move(left=1)
cmap <right> eval fm.ui.console.move(right=1)
cmap <home>  eval fm.ui.console.move(right=0, absolute=true)
cmap <end>   eval fm.ui.console.move(right=-1, absolute=true)

# line editing
cmap <backspace>  eval fm.ui.console.delete(-1)
cmap <delete>     eval fm.ui.console.delete(0)
cmap <c-w>        eval fm.ui.console.delete_word()
cmap <c-k>        eval fm.ui.console.delete_rest(1)
cmap <c-u>        eval fm.ui.console.delete_rest(-1)
cmap <c-y>        eval fm.ui.console.paste()

# and of course the emacs way
copycmap <up>        <c-p>
copycmap <down>      <c-n>
copycmap <left>      <c-b>
copycmap <right>     <c-f>
copycmap <home>      <c-a>
copycmap <end>       <c-e>
copycmap <delete>    <c-d>
copycmap <backspace> <c-h>

# note: there are multiple ways to express backspaces.  <backspace> (code 263)
# and <backspace2> (code 127).  to be sure, use both.
copycmap <backspace> <backspace2>

# this special expression allows typing in numerals:
cmap <allow_quantifiers> false

# ===================================================================
# == pager keybindings
# ===================================================================

# movement
pmap  <down>      pager_move  down=1
pmap  <up>        pager_move  up=1
pmap  <left>      pager_move  left=4
pmap  <right>     pager_move  right=4
pmap  <home>      pager_move  to=0
pmap  <end>       pager_move  to=-1
pmap  <pagedown>  pager_move  down=1.0  pages=true
pmap  <pageup>    pager_move  up=1.0    pages=true
pmap  <c-d>       pager_move  down=0.5  pages=true
pmap  <c-u>       pager_move  up=0.5    pages=true

copypmap <up>       k  <c-p>
copypmap <down>     j  <c-n> <cr>
copypmap <left>     h
copypmap <right>    l
copypmap <home>     g
copypmap <end>      g
copypmap <c-d>      d
copypmap <c-u>      u
copypmap <pagedown> n  f  <c-f>  <space>
copypmap <pageup>   p  b  <c-b>

# basic
pmap     <c-l> redraw_window
pmap     <esc> pager_close
copypmap <ESC> q Q i <F3>
pmap E      edit_file

# ===================================================================
# == Taskview Keybindings
# ===================================================================

# Movement
tmap <up>        taskview_move up=1
tmap <down>      taskview_move down=1
tmap <home>      taskview_move to=0
tmap <end>       taskview_move to=-1
tmap <pagedown>  taskview_move down=1.0  pages=True
tmap <pageup>    taskview_move up=1.0    pages=True
tmap <C-d>       taskview_move down=0.5  pages=True
tmap <C-u>       taskview_move up=0.5    pages=True

copytmap <UP>       k  <C-p>
copytmap <DOWN>     j  <C-n> <CR>
copytmap <HOME>     g
copytmap <END>      G
copytmap <C-u>      u
copytmap <PAGEDOWN> n  f  <C-F>  <Space>
copytmap <PAGEUP>   p  b  <C-B>

# Changing priority and deleting tasks
tmap J          eval -q fm.ui.taskview.task_move(-1)
tmap K          eval -q fm.ui.taskview.task_move(0)
tmap dd         eval -q fm.ui.taskview.task_remove()
tmap <pagedown> eval -q fm.ui.taskview.task_move(-1)
tmap <pageup>   eval -q fm.ui.taskview.task_move(0)
tmap <delete>   eval -q fm.ui.taskview.task_remove()

# Basic
tmap <C-l> redraw_window
tmap <ESC> taskview_close
copytmap <ESC> q Q w <C-c>

